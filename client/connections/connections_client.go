// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new connections API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for connections API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateConnectionPortVirtualCircuit(params *CreateConnectionPortVirtualCircuitParams, authInfo runtime.ClientAuthInfoWriter) (*CreateConnectionPortVirtualCircuitOK, error)

	CreateOrganizationInterconnection(params *CreateOrganizationInterconnectionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrganizationInterconnectionCreated, error)

	CreateProjectInterconnection(params *CreateProjectInterconnectionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectInterconnectionCreated, error)

	DeleteInterconnection(params *DeleteInterconnectionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteInterconnectionAccepted, error)

	DeleteVirtualCircuit(params *DeleteVirtualCircuitParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVirtualCircuitAccepted, error)

	GetConnectionPort(params *GetConnectionPortParams, authInfo runtime.ClientAuthInfoWriter) (*GetConnectionPortOK, error)

	GetInterconnection(params *GetInterconnectionParams, authInfo runtime.ClientAuthInfoWriter) (*GetInterconnectionOK, error)

	GetVirtualCircuit(params *GetVirtualCircuitParams, authInfo runtime.ClientAuthInfoWriter) (*GetVirtualCircuitOK, error)

	ListConnectionPortVirtualCircuits(params *ListConnectionPortVirtualCircuitsParams, authInfo runtime.ClientAuthInfoWriter) (*ListConnectionPortVirtualCircuitsOK, error)

	ListConnectionPorts(params *ListConnectionPortsParams, authInfo runtime.ClientAuthInfoWriter) (*ListConnectionPortsOK, error)

	OrganizationListInterconnections(params *OrganizationListInterconnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationListInterconnectionsOK, error)

	ProjectListInterconnections(params *ProjectListInterconnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectListInterconnectionsOK, error)

	UpdateInterconnection(params *UpdateInterconnectionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateInterconnectionOK, error)

	UpdateVirtualCircuit(params *UpdateVirtualCircuitParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVirtualCircuitOK, *UpdateVirtualCircuitAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateConnectionPortVirtualCircuit creates a new virtual circuit

  Create a new Virtual Circuit on a dedicated connection using a Virtual Network record and an NNI VLAN value.
*/
func (a *Client) CreateConnectionPortVirtualCircuit(params *CreateConnectionPortVirtualCircuitParams, authInfo runtime.ClientAuthInfoWriter) (*CreateConnectionPortVirtualCircuitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConnectionPortVirtualCircuitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createConnectionPortVirtualCircuit",
		Method:             "POST",
		PathPattern:        "/connections/{connection_id}/ports/{port_id}/virtual-circuits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateConnectionPortVirtualCircuitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateConnectionPortVirtualCircuitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createConnectionPortVirtualCircuit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOrganizationInterconnection requests a new connection for the organization

  Creates a new connection request. A Project ID must be specified in the request body for connections on shared ports.
*/
func (a *Client) CreateOrganizationInterconnection(params *CreateOrganizationInterconnectionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrganizationInterconnectionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationInterconnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOrganizationInterconnection",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_id}/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationInterconnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationInterconnectionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationInterconnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProjectInterconnection requests a new connection for the project s organization

  Creates a new connection request
*/
func (a *Client) CreateProjectInterconnection(params *CreateProjectInterconnectionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectInterconnectionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectInterconnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProjectInterconnection",
		Method:             "POST",
		PathPattern:        "/projects/{project_id}/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProjectInterconnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectInterconnectionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProjectInterconnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteInterconnection deletes connection

  Delete a connection, its associated ports and virtual circuits.
*/
func (a *Client) DeleteInterconnection(params *DeleteInterconnectionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteInterconnectionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInterconnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInterconnection",
		Method:             "DELETE",
		PathPattern:        "/connections/{connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInterconnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInterconnectionAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteInterconnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVirtualCircuit deletes a virtual circuit

  Delete a virtual circuit from a dedicated port.
*/
func (a *Client) DeleteVirtualCircuit(params *DeleteVirtualCircuitParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVirtualCircuitAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVirtualCircuitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteVirtualCircuit",
		Method:             "DELETE",
		PathPattern:        "/virtual-circuits/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVirtualCircuitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVirtualCircuitAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteVirtualCircuit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConnectionPort gets a connection port

  Get the details of an connection port.
*/
func (a *Client) GetConnectionPort(params *GetConnectionPortParams, authInfo runtime.ClientAuthInfoWriter) (*GetConnectionPortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConnectionPortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConnectionPort",
		Method:             "GET",
		PathPattern:        "/connections/{connection_id}/ports/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConnectionPortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConnectionPortOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConnectionPort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInterconnection gets connection

  Get the details of a connection
*/
func (a *Client) GetInterconnection(params *GetInterconnectionParams, authInfo runtime.ClientAuthInfoWriter) (*GetInterconnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInterconnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInterconnection",
		Method:             "GET",
		PathPattern:        "/connections/{connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInterconnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInterconnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInterconnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVirtualCircuit gets a virtual circuit

  Get the details of a virtual circuit
*/
func (a *Client) GetVirtualCircuit(params *GetVirtualCircuitParams, authInfo runtime.ClientAuthInfoWriter) (*GetVirtualCircuitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVirtualCircuitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVirtualCircuit",
		Method:             "GET",
		PathPattern:        "/virtual-circuits/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVirtualCircuitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVirtualCircuitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVirtualCircuit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListConnectionPortVirtualCircuits lists a connection port s virtual circuits

  List the virtual circuit record(s) associatiated with a particular connection port.
*/
func (a *Client) ListConnectionPortVirtualCircuits(params *ListConnectionPortVirtualCircuitsParams, authInfo runtime.ClientAuthInfoWriter) (*ListConnectionPortVirtualCircuitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListConnectionPortVirtualCircuitsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listConnectionPortVirtualCircuits",
		Method:             "GET",
		PathPattern:        "/connections/{connection_id}/ports/{port_id}/virtual-circuits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListConnectionPortVirtualCircuitsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListConnectionPortVirtualCircuitsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listConnectionPortVirtualCircuits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListConnectionPorts lists a connection s ports

  List the ports associated to an connection.
*/
func (a *Client) ListConnectionPorts(params *ListConnectionPortsParams, authInfo runtime.ClientAuthInfoWriter) (*ListConnectionPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListConnectionPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listConnectionPorts",
		Method:             "GET",
		PathPattern:        "/connections/{connection_id}/ports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListConnectionPortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListConnectionPortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listConnectionPorts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OrganizationListInterconnections lists organization connections

  List the connections belonging to the organization
*/
func (a *Client) OrganizationListInterconnections(params *OrganizationListInterconnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*OrganizationListInterconnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationListInterconnectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "organizationListInterconnections",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_id}/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrganizationListInterconnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationListInterconnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for organizationListInterconnections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectListInterconnections lists project connections

  List the connections belonging to the project
*/
func (a *Client) ProjectListInterconnections(params *ProjectListInterconnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectListInterconnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectListInterconnectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projectListInterconnections",
		Method:             "GET",
		PathPattern:        "/projects/{project_id}/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectListInterconnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectListInterconnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for projectListInterconnections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateInterconnection updates connection

  Update the details of a connection
*/
func (a *Client) UpdateInterconnection(params *UpdateInterconnectionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateInterconnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInterconnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateInterconnection",
		Method:             "PUT",
		PathPattern:        "/connections/{connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInterconnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateInterconnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateInterconnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVirtualCircuit updates a virtual circuit

  Update the details of a virtual circuit.
*/
func (a *Client) UpdateVirtualCircuit(params *UpdateVirtualCircuitParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVirtualCircuitOK, *UpdateVirtualCircuitAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVirtualCircuitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateVirtualCircuit",
		Method:             "PUT",
		PathPattern:        "/virtual-circuits/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVirtualCircuitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateVirtualCircuitOK:
		return value, nil, nil
	case *UpdateVirtualCircuitAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

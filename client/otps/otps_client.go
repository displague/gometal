// Code generated by go-swagger; DO NOT EDIT.

package otps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new otps API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for otps API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	FindEnsureOtp(params *FindEnsureOtpParams, authInfo runtime.ClientAuthInfoWriter) (*FindEnsureOtpNoContent, error)

	FindRecoveryCodes(params *FindRecoveryCodesParams, authInfo runtime.ClientAuthInfoWriter) (*FindRecoveryCodesOK, error)

	ReceiveCodes(params *ReceiveCodesParams, authInfo runtime.ClientAuthInfoWriter) (*ReceiveCodesNoContent, error)

	RegenerateCodes(params *RegenerateCodesParams, authInfo runtime.ClientAuthInfoWriter) (*RegenerateCodesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  FindEnsureOtp verifies user by providing an o t p

  It verifies the user once a valid OTP is provided. It gives back a session token, essentially logging in the user.
*/
func (a *Client) FindEnsureOtp(params *FindEnsureOtpParams, authInfo runtime.ClientAuthInfoWriter) (*FindEnsureOtpNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindEnsureOtpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findEnsureOtp",
		Method:             "POST",
		PathPattern:        "/user/otp/verify/{otp}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindEnsureOtpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindEnsureOtpNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findEnsureOtp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindRecoveryCodes retrieves my recovery codes

  Returns my recovery codes.
*/
func (a *Client) FindRecoveryCodes(params *FindRecoveryCodesParams, authInfo runtime.ClientAuthInfoWriter) (*FindRecoveryCodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindRecoveryCodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findRecoveryCodes",
		Method:             "GET",
		PathPattern:        "/user/otp/recovery-codes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindRecoveryCodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindRecoveryCodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findRecoveryCodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReceiveCodes receives an o t p per sms

  Sends an OTP to the user's mobile phone.
*/
func (a *Client) ReceiveCodes(params *ReceiveCodesParams, authInfo runtime.ClientAuthInfoWriter) (*ReceiveCodesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReceiveCodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "receiveCodes",
		Method:             "POST",
		PathPattern:        "/user/otp/sms/receive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReceiveCodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReceiveCodesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for receiveCodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RegenerateCodes generates new recovery codes

  Generate a new set of recovery codes.
*/
func (a *Client) RegenerateCodes(params *RegenerateCodesParams, authInfo runtime.ClientAuthInfoWriter) (*RegenerateCodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegenerateCodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "regenerateCodes",
		Method:             "POST",
		PathPattern:        "/user/otp/recovery-codes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RegenerateCodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegenerateCodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for regenerateCodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

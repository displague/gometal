// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new events API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for events API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	FindConnectionEvents(params *FindConnectionEventsParams, authInfo runtime.ClientAuthInfoWriter) (*FindConnectionEventsOK, error)

	FindConnectionPortEvents(params *FindConnectionPortEventsParams, authInfo runtime.ClientAuthInfoWriter) (*FindConnectionPortEventsOK, error)

	FindDeviceEvents(params *FindDeviceEventsParams, authInfo runtime.ClientAuthInfoWriter) (*FindDeviceEventsOK, error)

	FindEventByID(params *FindEventByIDParams, authInfo runtime.ClientAuthInfoWriter) (*FindEventByIDOK, error)

	FindEvents(params *FindEventsParams, authInfo runtime.ClientAuthInfoWriter) (*FindEventsOK, error)

	FindOrganizationEvents(params *FindOrganizationEventsParams, authInfo runtime.ClientAuthInfoWriter) (*FindOrganizationEventsOK, error)

	FindProjectEvents(params *FindProjectEventsParams, authInfo runtime.ClientAuthInfoWriter) (*FindProjectEventsOK, error)

	FindVirtualCircuitEvents(params *FindVirtualCircuitEventsParams, authInfo runtime.ClientAuthInfoWriter) (*FindVirtualCircuitEventsOK, error)

	FindVolumeEvents(params *FindVolumeEventsParams, authInfo runtime.ClientAuthInfoWriter) (*FindVolumeEventsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  FindConnectionEvents retrieves connection events

  Returns a list of the connection events
*/
func (a *Client) FindConnectionEvents(params *FindConnectionEventsParams, authInfo runtime.ClientAuthInfoWriter) (*FindConnectionEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindConnectionEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findConnectionEvents",
		Method:             "GET",
		PathPattern:        "/connections/{connection_id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindConnectionEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindConnectionEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findConnectionEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindConnectionPortEvents retrieves connection port events

  Returns a list of the connection port events
*/
func (a *Client) FindConnectionPortEvents(params *FindConnectionPortEventsParams, authInfo runtime.ClientAuthInfoWriter) (*FindConnectionPortEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindConnectionPortEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findConnectionPortEvents",
		Method:             "GET",
		PathPattern:        "/connections/{connection_id}/ports/{id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindConnectionPortEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindConnectionPortEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findConnectionPortEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindDeviceEvents retrieves device s events

  Returns a list of events pertaining to a specific device
*/
func (a *Client) FindDeviceEvents(params *FindDeviceEventsParams, authInfo runtime.ClientAuthInfoWriter) (*FindDeviceEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindDeviceEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findDeviceEvents",
		Method:             "GET",
		PathPattern:        "/devices/{id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindDeviceEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindDeviceEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findDeviceEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindEventByID retrieves an event

  Returns a single event if the user has access
*/
func (a *Client) FindEventByID(params *FindEventByIDParams, authInfo runtime.ClientAuthInfoWriter) (*FindEventByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindEventByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findEventById",
		Method:             "GET",
		PathPattern:        "/events/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindEventByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindEventByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findEventById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindEvents retrieves current user s events

  Returns a list of the current userâ€™s events
*/
func (a *Client) FindEvents(params *FindEventsParams, authInfo runtime.ClientAuthInfoWriter) (*FindEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findEvents",
		Method:             "GET",
		PathPattern:        "/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindOrganizationEvents retrieves organization s events

  Returns a list of events for a single organization
*/
func (a *Client) FindOrganizationEvents(params *FindOrganizationEventsParams, authInfo runtime.ClientAuthInfoWriter) (*FindOrganizationEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindOrganizationEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findOrganizationEvents",
		Method:             "GET",
		PathPattern:        "/organizations/{id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindOrganizationEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindOrganizationEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findOrganizationEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindProjectEvents retrieves project s events

  Returns a list of events for a single project
*/
func (a *Client) FindProjectEvents(params *FindProjectEventsParams, authInfo runtime.ClientAuthInfoWriter) (*FindProjectEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindProjectEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findProjectEvents",
		Method:             "GET",
		PathPattern:        "/projects/{id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindProjectEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindProjectEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findProjectEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindVirtualCircuitEvents retrieves connection events

  Returns a list of the virtual circuit events
*/
func (a *Client) FindVirtualCircuitEvents(params *FindVirtualCircuitEventsParams, authInfo runtime.ClientAuthInfoWriter) (*FindVirtualCircuitEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindVirtualCircuitEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findVirtualCircuitEvents",
		Method:             "GET",
		PathPattern:        "/virtual-circuit/{id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindVirtualCircuitEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindVirtualCircuitEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findVirtualCircuitEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindVolumeEvents retrieves volume s events

  Returns a list of the current volumeâ€™s events
*/
func (a *Client) FindVolumeEvents(params *FindVolumeEventsParams, authInfo runtime.ClientAuthInfoWriter) (*FindVolumeEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindVolumeEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findVolumeEvents",
		Method:             "GET",
		PathPattern:        "/volumes/{id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindVolumeEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindVolumeEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findVolumeEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

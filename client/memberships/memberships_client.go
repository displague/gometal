// Code generated by go-swagger; DO NOT EDIT.

package memberships

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new memberships API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for memberships API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteMembership(params *DeleteMembershipParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMembershipNoContent, error)

	FindMembershipByID(params *FindMembershipByIDParams, authInfo runtime.ClientAuthInfoWriter) (*FindMembershipByIDOK, error)

	UpdateMembership(params *UpdateMembershipParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMembershipOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteMembership deletes the membership

  Deletes the membership.
*/
func (a *Client) DeleteMembership(params *DeleteMembershipParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMembershipNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMembershipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMembership",
		Method:             "DELETE",
		PathPattern:        "/memberships/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMembershipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMembershipNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMembership: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindMembershipByID retrieves a membership

  Returns a single membership.
*/
func (a *Client) FindMembershipByID(params *FindMembershipByIDParams, authInfo runtime.ClientAuthInfoWriter) (*FindMembershipByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMembershipByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findMembershipById",
		Method:             "GET",
		PathPattern:        "/memberships/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMembershipByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMembershipByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMembershipById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateMembership updates the membership

  Updates the membership.
*/
func (a *Client) UpdateMembership(params *UpdateMembershipParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMembershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMembershipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMembership",
		Method:             "PUT",
		PathPattern:        "/memberships/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMembershipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMembershipOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMembership: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

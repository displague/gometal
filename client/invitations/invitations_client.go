// Code generated by go-swagger; DO NOT EDIT.

package invitations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new invitations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for invitations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AcceptInvitation(params *AcceptInvitationParams, authInfo runtime.ClientAuthInfoWriter) (*AcceptInvitationOK, error)

	CreateOrganizationInvitation(params *CreateOrganizationInvitationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrganizationInvitationCreated, error)

	CreateProjectInvitation(params *CreateProjectInvitationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectInvitationCreated, error)

	DeclineInvitation(params *DeclineInvitationParams, authInfo runtime.ClientAuthInfoWriter) (*DeclineInvitationNoContent, error)

	FindInvitationByID(params *FindInvitationByIDParams, authInfo runtime.ClientAuthInfoWriter) (*FindInvitationByIDOK, error)

	FindInvitations(params *FindInvitationsParams, authInfo runtime.ClientAuthInfoWriter) (*FindInvitationsOK, error)

	FindOrganizationInvitations(params *FindOrganizationInvitationsParams, authInfo runtime.ClientAuthInfoWriter) (*FindOrganizationInvitationsOK, error)

	FindProjectInvitations(params *FindProjectInvitationsParams, authInfo runtime.ClientAuthInfoWriter) (*FindProjectInvitationsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AcceptInvitation accepts an invitation

  Accept an invitation.
*/
func (a *Client) AcceptInvitation(params *AcceptInvitationParams, authInfo runtime.ClientAuthInfoWriter) (*AcceptInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptInvitationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "acceptInvitation",
		Method:             "PUT",
		PathPattern:        "/invitations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOrganizationInvitation creates an invitation for an organization

  In order to add a user to an organization, they must first be invited.
To invite to several projects the parameter `projects_ids:[a,b,c]` can be used
*/
func (a *Client) CreateOrganizationInvitation(params *CreateOrganizationInvitationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrganizationInvitationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationInvitationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOrganizationInvitation",
		Method:             "POST",
		PathPattern:        "/organizations/{id}/invitations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationInvitationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProjectInvitation creates an invitation for a project

  In order to add a user to a project, they must first be invited.
*/
func (a *Client) CreateProjectInvitation(params *CreateProjectInvitationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectInvitationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectInvitationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProjectInvitation",
		Method:             "POST",
		PathPattern:        "/projects/{project_id}/invitations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProjectInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectInvitationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProjectInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeclineInvitation declines an invitation

  Decline an invitation.
*/
func (a *Client) DeclineInvitation(params *DeclineInvitationParams, authInfo runtime.ClientAuthInfoWriter) (*DeclineInvitationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeclineInvitationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "declineInvitation",
		Method:             "DELETE",
		PathPattern:        "/invitations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeclineInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeclineInvitationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for declineInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindInvitationByID views an invitation

  Returns a single invitation. (It include the `invitable` to maintain backward compatibility but will be removed soon)
*/
func (a *Client) FindInvitationByID(params *FindInvitationByIDParams, authInfo runtime.ClientAuthInfoWriter) (*FindInvitationByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindInvitationByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findInvitationById",
		Method:             "GET",
		PathPattern:        "/invitations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindInvitationByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindInvitationByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findInvitationById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindInvitations retrieves current user invitations

  Returns all invitations in current user.
*/
func (a *Client) FindInvitations(params *FindInvitationsParams, authInfo runtime.ClientAuthInfoWriter) (*FindInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindInvitationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findInvitations",
		Method:             "GET",
		PathPattern:        "/invitations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindInvitationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findInvitations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindOrganizationInvitations retrieves organization invitations

  Returns all invitations in an organization.
*/
func (a *Client) FindOrganizationInvitations(params *FindOrganizationInvitationsParams, authInfo runtime.ClientAuthInfoWriter) (*FindOrganizationInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindOrganizationInvitationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findOrganizationInvitations",
		Method:             "GET",
		PathPattern:        "/organizations/{id}/invitations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindOrganizationInvitationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindOrganizationInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findOrganizationInvitations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindProjectInvitations retrieves project invitations

  Returns all invitations in a project.
*/
func (a *Client) FindProjectInvitations(params *FindProjectInvitationsParams, authInfo runtime.ClientAuthInfoWriter) (*FindProjectInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindProjectInvitationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "findProjectInvitations",
		Method:             "GET",
		PathPattern:        "/projects/{project_id}/invitations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindProjectInvitationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindProjectInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findProjectInvitations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
